// Legal cards array (expand as needed)
const legalCards = [
  "Grizzly Bears", "Shock", "Cancel", "Murder", "Rampant Growth"
];

// Cache for API responses
const cardCache = {};

// DOM Elements
const searchButton = document.getElementById('search-button');
const cardSearch = document.getElementById('card-search');
const resultBox = document.getElementById('result');

// Initialize
document.addEventListener('DOMContentLoaded', function() {
  // Search functionality
  searchButton.addEventListener('click', checkLegality);
  cardSearch.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') checkLegality();
  });

  // Load sets if on playlist page
  if (window.location.pathname.includes('playlist.html')) {
    loadAllSets();
  }
});

// Core Functions
async function checkLegality() {
  const cardName = cardSearch.value.trim();
  if (!cardName) {
    resultBox.textContent = "Please enter a card name";
    resultBox.className = "result-box";
    return;
  }

  try {
    const card = await fetchCard(cardName);
    const isLegal = evaluateCard(card);

    resultBox.textContent = `${card.name} is ${isLegal ? 'LEGAL' : 'BANNED'}`;
    resultBox.className = `result-box ${isLegal ? 'legal' : 'banned'}`;
  } catch (error) {
    resultBox.textContent = "Card not found or error occurred";
    resultBox.className = "result-box";
  }
}

async function fetchCard(cardName) {
  if (cardCache[cardName.toLowerCase()]) {
    return cardCache[cardName.toLowerCase()];
  }

  const response = await fetch(`https://api.scryfall.com/cards/named?fuzzy=${encodeURIComponent(cardName)}`);
  const card = await response.json();
  cardCache[cardName.toLowerCase()] = card;
  return card;
}

function evaluateCard(card) {
  // Mechanical rules
  if (isUnconditionalKillSpell(card) && card.cmc < 5) return false;
  if (isUnconditionalCounter(card) && card.cmc < 4) return false;
  if (isDamageSpell(card) && getMaxDamage(card) > card.cmc) return false;
  
  // Competitive check
  if (isCompetitive(card)) return false;
  
  return true;
}

// Set Browser Functions
async function loadAllSets() {
  try {
    const response = await fetch('https://api.scryfall.com/sets');
    const data = await response.json();
    displaySets(data.data);
  } catch (error) {
    console.error("Error loading sets:", error);
  }
}

function displaySets(sets) {
  const container = document.querySelector('.set-grid') || document.createElement('div');
  container.className = 'set-grid';
  container.innerHTML = '';

  sets.forEach(set => {
    const setElement = document.createElement('div');
    setElement.className = 'set-card';
    setElement.innerHTML = `
      <img src="${set.icon_svg_uri}" alt="${set.name}" width="30">
      <h3>${set.name}</h3>
      <p>${set.card_count} cards</p>
    `;
    setElement.addEventListener('click', () => showCardsInSet(set.code));
    container.appendChild(setElement);
  });

  // Add to DOM if not already present
  if (!document.querySelector('.set-grid')) {
    document.querySelector('main').prepend(container);
  }
}

async function showCardsInSet(setCode) {
  const grid = document.getElementById('card-grid');
  const list = document.getElementById('card-list');
  grid.innerHTML = '<p>Loading cards...</p>';
  list.innerHTML = '';

  try {
    const cards = await _fetchPaginatedCards(`q=e:${setCode}`);
    displayCards(cards);
  } catch (error) {
    grid.innerHTML = '<p>Error loading cards</p>';
  }
}

function displayCards(cards) {
  const grid = document.getElementById('card-grid');
  const list = document.getElementById('card-list');
  grid.innerHTML = '';
  list.innerHTML = '';

  cards.sort((a, b) => a.name.localeCompare(b.name)).forEach(card => {
    // Grid Item
    const gridItem = document.createElement('div');
    gridItem.className = 'card';
    gridItem.dataset.name = card.name;
    gridItem.dataset.cmc = card.cmc;
    gridItem.dataset.rarity = card.rarity;
    gridItem.innerHTML = `
      <img src="${card.image_uris?.small || card.card_faces[0].image_uris.small}" 
           alt="${card.name}" 
           loading="lazy">
      <p>${card.name}</p>
    `;
    grid.appendChild(gridItem);

    // List Item
    const listItem = document.createElement('li');
    listItem.innerHTML = `
      <span>${card.name}</span>
      <span>${card.mana_cost || ''}</span>
    `;
    list.appendChild(listItem);
  });
}

// View Toggle Functions
function showGridView() {
  document.getElementById('card-grid').style.display = 'grid';
  document.getElementById('card-list').style.display = 'none';
}

function showListView() {
  document.getElementById('card-grid').style.display = 'none';
  document.getElementById('card-list').style.display = 'block';
}

function sortCards(by) {
  const grid = document.getElementById('card-grid');
  const cards = Array.from(grid.children);
  cards.sort((a, b) => a.dataset[by] > b.dataset[by] ? 1 : -1);
  grid.innerHTML = '';
  cards.forEach(card => grid.appendChild(card));
}

// Helper Functions
async function _fetchPaginatedCards(query) {
  let cards = [];
  let url = `https://api.scryfall.com/cards/search?${query}`;
  
  while (url) {
    const response = await fetch(url);
    const data = await response.json();
    cards = cards.concat(data.data);
    url = data.has_more ? data.next_page : null;
  }
  
  return cards;
}

function isCompetitive(card) {
  return ["modern", "pioneer", "legacy"].some(
    format => card.legalities?.[format] === "legal"
  );
}

function isUnconditionalKillSpell(card) {
  return /destroy target (creature|permanent)/i.test(card.oracle_text) &&
         !/(if|unless|when)/i.test(card.oracle_text);
}

function isUnconditionalCounter(card) {
  return /counter target (spell|ability)/i.test(card.oracle_text) &&
         !/(if|unless|when)/i.test(card.oracle_text);
}

function isDamageSpell(card) {
  return /deal(?:s)? \d+ damage/i.test(card.oracle_text);
}

function getMaxDamage(card) {
  const match = card.oracle_text.match(/deal(?:s)? (\d+) damage/i);
  return match ? parseInt(match[1]) : 0;
}
